// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/geister_service.proto

package geister

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeisterClient is the client API for Geister service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeisterClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	GetGameState(ctx context.Context, in *GetGameStateRequest, opts ...grpc.CallOption) (*GetGameStateResponse, error)
	UpdateGameState(ctx context.Context, in *UpdateGameStateRequest, opts ...grpc.CallOption) (*UpdateGameStateResponse, error)
}

type geisterClient struct {
	cc grpc.ClientConnInterface
}

func NewGeisterClient(cc grpc.ClientConnInterface) GeisterClient {
	return &geisterClient{cc}
}

func (c *geisterClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/Geister/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geisterClient) GetGameState(ctx context.Context, in *GetGameStateRequest, opts ...grpc.CallOption) (*GetGameStateResponse, error) {
	out := new(GetGameStateResponse)
	err := c.cc.Invoke(ctx, "/Geister/GetGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geisterClient) UpdateGameState(ctx context.Context, in *UpdateGameStateRequest, opts ...grpc.CallOption) (*UpdateGameStateResponse, error) {
	out := new(UpdateGameStateResponse)
	err := c.cc.Invoke(ctx, "/Geister/UpdateGameState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeisterServer is the server API for Geister service.
// All implementations must embed UnimplementedGeisterServer
// for forward compatibility
type GeisterServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	GetGameState(context.Context, *GetGameStateRequest) (*GetGameStateResponse, error)
	UpdateGameState(context.Context, *UpdateGameStateRequest) (*UpdateGameStateResponse, error)
	mustEmbedUnimplementedGeisterServer()
}

// UnimplementedGeisterServer must be embedded to have forward compatible implementations.
type UnimplementedGeisterServer struct {
}

func (UnimplementedGeisterServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedGeisterServer) GetGameState(context.Context, *GetGameStateRequest) (*GetGameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameState not implemented")
}
func (UnimplementedGeisterServer) UpdateGameState(context.Context, *UpdateGameStateRequest) (*UpdateGameStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameState not implemented")
}
func (UnimplementedGeisterServer) mustEmbedUnimplementedGeisterServer() {}

// UnsafeGeisterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeisterServer will
// result in compilation errors.
type UnsafeGeisterServer interface {
	mustEmbedUnimplementedGeisterServer()
}

func RegisterGeisterServer(s grpc.ServiceRegistrar, srv GeisterServer) {
	s.RegisterService(&Geister_ServiceDesc, srv)
}

func _Geister_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeisterServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Geister/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeisterServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geister_GetGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeisterServer).GetGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Geister/GetGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeisterServer).GetGameState(ctx, req.(*GetGameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geister_UpdateGameState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeisterServer).UpdateGameState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Geister/UpdateGameState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeisterServer).UpdateGameState(ctx, req.(*UpdateGameStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Geister_ServiceDesc is the grpc.ServiceDesc for Geister service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geister_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Geister",
	HandlerType: (*GeisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Geister_Start_Handler,
		},
		{
			MethodName: "GetGameState",
			Handler:    _Geister_GetGameState_Handler,
		},
		{
			MethodName: "UpdateGameState",
			Handler:    _Geister_UpdateGameState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/geister_service.proto",
}
